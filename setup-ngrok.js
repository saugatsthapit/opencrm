#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const ENV_LOCAL_PATH = path.resolve('.env.local');

// ANSI color codes for prettier console output
const COLORS = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  red: '\x1b[31m'
};

console.log(`
${COLORS.bright}${COLORS.blue}==================================================${COLORS.reset}
${COLORS.bright}${COLORS.blue}            NgRok Setup Assistant${COLORS.reset}
${COLORS.bright}${COLORS.blue}==================================================${COLORS.reset}
`);

console.log(`${COLORS.cyan}This script helps you set up your ngrok configuration for the FastCRM application.${COLORS.reset}
${COLORS.dim}It will create or update your .env.local file with the necessary variables.${COLORS.reset}
`);

// Function to check if ngrok is installed
async function checkNgrokInstallation() {
  const { exec } = require('child_process');
  
  return new Promise((resolve) => {
    exec('ngrok --version', (error) => {
      if (error) {
        console.log(`${COLORS.yellow}‚ö†Ô∏è ngrok doesn't seem to be installed or is not in your PATH.${COLORS.reset}`);
        console.log(`${COLORS.dim}You can install it from https://ngrok.com/download${COLORS.reset}\n`);
        resolve(false);
      } else {
        console.log(`${COLORS.green}‚úÖ ngrok is installed${COLORS.reset}\n`);
        resolve(true);
      }
    });
  });
}

// Function to check if a port is in use
async function isPortInUse(port) {
  const { exec } = require('child_process');
  
  return new Promise((resolve) => {
    const command = process.platform === 'win32' 
      ? `netstat -ano | findstr :${port}` 
      : `lsof -i:${port}`;
    
    exec(command, (error, stdout) => {
      resolve(!!stdout.trim());
    });
  });
}

// Function to prompt for ngrok URL
function promptForNgrokUrl() {
  return new Promise((resolve) => {
    rl.question(`${COLORS.bright}Please enter your ngrok URL (e.g., https://abcd1234.ngrok-free.app):${COLORS.reset} `, (answer) => {
      try {
        // Basic URL validation
        if (!answer.trim()) {
          console.log(`${COLORS.red}‚ùå Empty URL provided${COLORS.reset}`);
          return promptForNgrokUrl().then(resolve);
        }
        
        if (!answer.startsWith('http')) {
          console.log(`${COLORS.red}‚ùå URL must start with http:// or https://${COLORS.reset}`);
          return promptForNgrokUrl().then(resolve);
        }
        
        try {
          new URL(answer);
          resolve(answer.trim());
        } catch (e) {
          console.log(`${COLORS.red}‚ùå Invalid URL format${COLORS.reset}`);
          return promptForNgrokUrl().then(resolve);
        }
      } catch (error) {
        console.log(`${COLORS.red}‚ùå Error validating URL: ${error.message}${COLORS.reset}`);
        return promptForNgrokUrl().then(resolve);
      }
    });
  });
}

// Function to check existing .env.local file
function checkExistingEnvFile() {
  try {
    if (fs.existsSync(ENV_LOCAL_PATH)) {
      const content = fs.readFileSync(ENV_LOCAL_PATH, 'utf8');
      const lines = content.split('\n');
      
      // Extract existing variables
      const existingVars = {};
      lines.forEach(line => {
        if (line.trim() && !line.startsWith('#')) {
          const [key, ...valueParts] = line.split('=');
          if (key && valueParts.length) {
            existingVars[key.trim()] = valueParts.join('=').trim();
          }
        }
      });
      
      console.log(`${COLORS.blue}‚ÑπÔ∏è Found existing .env.local file${COLORS.reset}`);
      
      if (existingVars.VITE_NGROK_URL) {
        console.log(`${COLORS.blue}‚ÑπÔ∏è Current NGROK URL: ${existingVars.VITE_NGROK_URL}${COLORS.reset}\n`);
      }
      
      return existingVars;
    } else {
      console.log(`${COLORS.blue}‚ÑπÔ∏è No existing .env.local file found. Will create a new one.${COLORS.reset}\n`);
      return {};
    }
  } catch (error) {
    console.log(`${COLORS.red}‚ùå Error reading .env.local: ${error.message}${COLORS.reset}`);
    return {};
  }
}

// Function to save variables to .env.local
function saveEnvFile(variables) {
  try {
    let content = '# FastCRM environment configuration - generated by setup-ngrok.js\n';
    content += '# This file should not be committed to version control\n\n';
    
    Object.entries(variables).forEach(([key, value]) => {
      content += `${key}=${value}\n`;
    });
    
    fs.writeFileSync(ENV_LOCAL_PATH, content, 'utf8');
    console.log(`${COLORS.green}‚úÖ Successfully saved configuration to .env.local${COLORS.reset}`);
    return true;
  } catch (error) {
    console.log(`${COLORS.red}‚ùå Error saving .env.local: ${error.message}${COLORS.reset}`);
    return false;
  }
}

// Function to check if the server is running
async function checkServerStatus(port = 8002) {
  const portInUse = await isPortInUse(port);
  
  if (portInUse) {
    console.log(`${COLORS.green}‚úÖ Server appears to be running on port ${port}${COLORS.reset}`);
  } else {
    console.log(`${COLORS.yellow}‚ö†Ô∏è Server does not appear to be running on port ${port}${COLORS.reset}`);
    console.log(`${COLORS.dim}Start the server with: npm run server${COLORS.reset}\n`);
  }
  
  return portInUse;
}

// Main function
async function main() {
  try {
    // Check if ngrok is installed
    await checkNgrokInstallation();
    
    // Check server status
    await checkServerStatus();
    
    // Check existing .env.local file
    const existingVars = checkExistingEnvFile();
    
    // Get ngrok URL from user
    const ngrokUrl = await promptForNgrokUrl();
    
    // Derive API URL from ngrok URL
    const apiUrl = `${ngrokUrl}/api/v1`;
    
    // Prepare variables to save
    const variables = {
      ...existingVars,
      VITE_NGROK_URL: ngrokUrl,
      VITE_API_URL: apiUrl
    };
    
    // Save to .env.local
    if (saveEnvFile(variables)) {
      console.log(`\n${COLORS.green}${COLORS.bright}üéâ Setup complete!${COLORS.reset}\n`);
      console.log(`${COLORS.cyan}Next steps:${COLORS.reset}`);
      console.log(`${COLORS.bright}1. Make sure your server is running (npm run server)${COLORS.reset}`);
      console.log(`${COLORS.bright}2. Make sure ngrok is running (ngrok http 8002)${COLORS.reset}`);
      console.log(`${COLORS.bright}3. Restart your development server (npm run dev)${COLORS.reset}\n`);
      
      console.log(`${COLORS.dim}Configuration saved:${COLORS.reset}`);
      console.log(`${COLORS.dim}- NGROK URL: ${ngrokUrl}${COLORS.reset}`);
      console.log(`${COLORS.dim}- API URL: ${apiUrl}${COLORS.reset}\n`);
    }
  } catch (error) {
    console.log(`${COLORS.red}‚ùå An error occurred: ${error.message}${COLORS.reset}`);
  } finally {
    rl.close();
  }
}

main(); 